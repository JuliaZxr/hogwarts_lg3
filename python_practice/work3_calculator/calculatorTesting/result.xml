<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite errors="0" failures="4" hostname="PC-202001080213" name="pytest" skipped="0" tests="24" time="0.481" timestamp="2021-02-22T00:06:20.110685"><testcase classname="test_calculator.TestCalculator" file="test_calculator.py" line="97" name="test_add[整数]" time="0.002"></testcase><testcase classname="test_calculator.TestCalculator" file="test_calculator.py" line="97" name="test_add[负数]" time="0.001"></testcase><testcase classname="test_calculator.TestCalculator" file="test_calculator.py" line="97" name="test_add[零]" time="0.002"></testcase><testcase classname="test_calculator.TestCalculator" file="test_calculator.py" line="97" name="test_add[小数]" time="0.001"></testcase><testcase classname="test_calculator.TestCalculator" file="test_calculator.py" line="97" name="test_add[大数]" time="0.003"></testcase><testcase classname="test_calculator.TestCalculator" file="test_calculator.py" line="113" name="test_addMistake[加法-错误的用例]" time="0.002"><failure message="assert 0 == 1">self = &lt;python_practice.work3_calculator.calculatorTesting.test_calculator.TestCalculator object at 0x0000019AF0F77DD8&gt;
a = -1, b = 1, expected = 1

    @pytest.mark.parametrize(&quot;a,b,expected&quot;, get_datas()[2], ids =get_datas()[3])
    @pytest.mark.add
    @allure.story(&quot;计算器-加法-错误用例&quot;)
    def test_addMistake(self, a, b, expected):
        # calc = Calculator()
        print(&quot;测试加法-错误用例&quot;)
        result = self.calc.add(a, b)
&gt;       assert result == expected
E       assert 0 == 1

test_calculator.py:121: AssertionError</failure></testcase><testcase classname="test_calculator.TestCalculator" file="test_calculator.py" line="132" name="test_subtract[整数相减]" time="0.003"></testcase><testcase classname="test_calculator.TestCalculator" file="test_calculator.py" line="132" name="test_subtract[负数相减]" time="0.002"></testcase><testcase classname="test_calculator.TestCalculator" file="test_calculator.py" line="132" name="test_subtract[零]" time="0.001"></testcase><testcase classname="test_calculator.TestCalculator" file="test_calculator.py" line="132" name="test_subtract[小数相减]" time="0.001"></testcase><testcase classname="test_calculator.TestCalculator" file="test_calculator.py" line="132" name="test_subtract[大数相减]" time="0.002"></testcase><testcase classname="test_calculator.TestCalculator" file="test_calculator.py" line="147" name="test_subtractMistake[减法-错误的用例]" time="0.001"><failure message="assert -2 == 1">self = &lt;python_practice.work3_calculator.calculatorTesting.test_calculator.TestCalculator object at 0x0000019AF0FBEE48&gt;
a = -1, b = 1, expected = 1

    @pytest.mark.parametrize(&quot;a,b,expected&quot;, get_datas()[6], ids =get_datas()[7])
    @pytest.mark.subtract
    @allure.story(&quot;计算器-减法-错误用例&quot;)
    def test_subtractMistake(self, a, b, expected):
        # calc = Calculator()
        print(&quot;测试减法-错误用例&quot;)
        result = round(self.calc.subtract(a, b), 1)
&gt;       assert result == expected
E       assert -2 == 1

test_calculator.py:155: AssertionError</failure></testcase><testcase classname="test_calculator.TestCalculator" file="test_calculator.py" line="166" name="test_multiply[整数相乘]" time="0.004"></testcase><testcase classname="test_calculator.TestCalculator" file="test_calculator.py" line="166" name="test_multiply[负数相乘]" time="0.002"></testcase><testcase classname="test_calculator.TestCalculator" file="test_calculator.py" line="166" name="test_multiply[零]" time="0.002"></testcase><testcase classname="test_calculator.TestCalculator" file="test_calculator.py" line="166" name="test_multiply[小数相乘]" time="0.001"></testcase><testcase classname="test_calculator.TestCalculator" file="test_calculator.py" line="166" name="test_multiply[大数相乘]" time="0.002"></testcase><testcase classname="test_calculator.TestCalculator" file="test_calculator.py" line="181" name="test_multiplyMistake[乘法-错误的用例]" time="0.002"><failure message="assert -1 == 1">self = &lt;python_practice.work3_calculator.calculatorTesting.test_calculator.TestCalculator object at 0x0000019AF0FB6160&gt;
a = -1, b = 1, expected = 1

    @pytest.mark.parametrize(&quot;a,b,expected&quot;, get_datas()[10], ids =get_datas()[11])
    @pytest.mark.multiply
    @allure.story(&quot;计算器-乘法-错误用例&quot;)
    def test_multiplyMistake(self, a, b, expected):
        # calc = Calculator()
        print(&quot;测试乘法-错误用例&quot;)
        result = self.calc.multiply(a, b)
&gt;       assert result == expected
E       assert -1 == 1

test_calculator.py:189: AssertionError</failure></testcase><testcase classname="test_calculator.TestCalculator" file="test_calculator.py" line="199" name="test_divide[被除数为零]" time="0.000"></testcase><testcase classname="test_calculator.TestCalculator" file="test_calculator.py" line="199" name="test_divide[负数相除]" time="0.001"></testcase><testcase classname="test_calculator.TestCalculator" file="test_calculator.py" line="199" name="test_divide[小数相除]" time="0.001"></testcase><testcase classname="test_calculator.TestCalculator" file="test_calculator.py" line="199" name="test_divide[大数相除]" time="0.002"></testcase><testcase classname="test_calculator.TestCalculator" file="test_calculator.py" line="214" name="test_divideMistake[异常-除数为零]" time="0.002"></testcase><testcase classname="test_calculator.TestCalculator" file="test_calculator.py" line="214" name="test_divideMistake[除法-错误的用例]" time="0.002"><failure message="assert -1.0 == 1">self = &lt;python_practice.work3_calculator.calculatorTesting.test_calculator.TestCalculator object at 0x0000019AF0FD4978&gt;
a = -1, b = 1, expected = 1

    @pytest.mark.parametrize(&quot;a,b,expected&quot;, get_datas()[14], ids =get_datas()[15])
    @pytest.mark.divide
    @allure.story(&quot;计算器-除法-错误用例&quot;)
    def test_divideMistake(self, a, b, expected):
        # calc = Calculator()
        try:
            result = round(self.calc.divide(a, b), 1)
&gt;           assert result == expected
E           assert -1.0 == 1

test_calculator.py:222: AssertionError</failure></testcase></testsuite></testsuites>